* refactor schema definition towards model usage
* property test between persistent store and in memory store
* testing the mapping of requests towards controller methods
* rework testing generated html
* deploy db to cloud
* UAT for stuff above
* find performant roundtrip (JRebel?)
    - JRebel
    - * http://stackoverflow.com/questions/998737/integrating-tomcat-and-eclipse-as-a-hot-deploy-environment
* Fehlerseiten für illegale URLs
* HTML5 webforms
* angular.js
* Bilder (Spinne mit Gehirn)
* Eindeutigkeit von Referenzen herstellen durch "... im Sinne von" Fragen
* Idea Sources und Filters
    - mit eigener URL / sharable
* Node Classifier (Personen, Objekte, Orte, Dokumente ...) ersetzen
* Node Processor
* Hosted vs Local Deployment
* RDF/Semantic web syntax
* XSS defense
* Pingback auf Seiten 
* Feedback Möglichkeit
* http://arborjs.org/introduction
* HTML/CSS validation


------------------------------ for testing controllers
// from http://stackoverflow.com/a/7916344/66686
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("yourContext.xml")
public class ControllerTest {

    @Autowired
    private RequestMappingHandlerAdapter handlerAdapter;

    @Autowired
    private RequestMappingHandlerMapping handlerMapping;

    @Test
    public void testController() throws Exception {
        MockHttpServletRequest request = new MockHttpServletRequest();
        // request init here

        MockHttpServletResponse response = new MockHttpServletResponse();
        Object handler = handlerMapping.getHandler(request).getHandler();
        ModelAndView modelAndView = handlerAdapter.handle(request, response, handler);

        // modelAndView and/or response asserts here
    }
}
